service: url-shortener # NOTE: update this with your service name

plugins:
  - serverless-stack-output
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    ENDPOINT: ${file(./secrets.json):${opt:stage}.ENDPOINT, "http://localhost:3000/"}
    DOMAIN_NAME: ${file(./secrets.json):${opt:stage}.DOMAIN_NAME}
    TABLE_NAME: ${self:service}-${opt:stage}
    TABLE_INDEX_NAME: ${self:service}-${opt:stage}-URLIndex
    COUNTER_TABLE_NAME: ${self:service}-${opt:stage}-counter
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region}:*:table/${self:provider.environment.TABLE_NAME}"
        - "arn:aws:dynamodb:${opt:region}:*:table/${self:provider.environment.TABLE_NAME}/index/${self:provider.environment.TABLE_INDEX_NAME}"
        - "arn:aws:dynamodb:${opt:region}:*:table/${self:provider.environment.COUNTER_TABLE_NAME}"


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  root:
    handler: handler.root
    events:
      - http:
          path: /
          method: get

  create:
    handler: handler.create
    events:
      - http:
          path: /
          method: post
          cors: true
          authorizer: aws_iam

  redirect:
    handler: handler.redirect
    events:
      - http:
          path: /{base58id}
          method: get

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${opt:stage}
    urlsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: longURL
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TABLE_INDEX_NAME}
            KeySchema:
              - AttributeName: longURL
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    counterTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.COUNTER_TABLE_NAME}
        AttributeDefinitions:
          -
            AttributeName: counterName
            AttributeType: S
        KeySchema:
          -
            AttributeName: counterName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  dynamodb:
    start:
      inMemory: false
      dbPath: ${env:PWD}/.dynamodb
    seed:
      counters: # This key name is irrelevant
        sources:
          -
            table: ${self:provider.environment.COUNTER_TABLE_NAME}
            sources: [./seed/counters.json]
  customDomain:
    domainName: ${self:provider.environment.DOMAIN_NAME}
    basePath: ${file(./secrets.json):${opt:stage}.BASE_PATH, 'false'}
    stage: ${opt:stage}
    createRoute53Record: true
    enabled: ${file(./secrets.json):${opt:stage}.enabled, 'false'}
  output:
    file: build/stack.yml
